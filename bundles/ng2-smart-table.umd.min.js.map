{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/ng2-smart-table/src/lib/components/cell/cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/edit-cell-default.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/custom-edit.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/default-edit.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/edit-cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/default-editor.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/checkbox-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/completer-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/input-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/select-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/textarea-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-view-mode/custom-view.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-view-mode/view-cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell.module.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-default.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/default-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/custom-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/default-filter.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/checkbox-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/completer-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/input-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/select-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter.module.ts","../../../projects/ng2-smart-table/src/lib/components/pager/pager.component.ts","../../../projects/ng2-smart-table/src/lib/components/pager/pager.module.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/create-cancel.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/edit-delete.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/custom.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.module.ts","../../../projects/ng2-smart-table/src/lib/components/thead/thead.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/actions.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/actions-title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/add-button.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/checkbox-select-all.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/column-title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/title/title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-filters-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-form-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-titles-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/thead.module.ts","../../../projects/ng2-smart-table/src/lib/lib/helpers.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/cell.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/row.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/column.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/data-set.ts","../../../projects/ng2-smart-table/src/lib/lib/grid.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/data-source.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.sorter.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.filter.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.pager.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.data-source.ts","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.component.ts","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.module.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/server/server-source.conf.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/server/server.data-source.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","length","concat","CellComponent","inputClass","mode","isInEditing","edited","EventEmitter","onEdited","event","isNew","grid","getNewRow","createConfirm","save","row","editConfirm","Component","args","selector","template","Input","Output","EditCellDefault","onStopEditing","cell","getRow","onClick","stopPropagation","CustomEditComponent","resolver","_this","_super","ngOnChanges","changes","customComponent","componentFactory","resolveComponentFactory","getColumn","editor","component","dynamicTarget","createComponent","instance","subscribe","ngOnDestroy","destroy","ComponentFactoryResolver","ViewChild","read","ViewContainerRef","static","DefaultEditComponent","getEditorType","type","EditCellComponent","CheckboxEditorComponent","onChange","trueVal","getConfig","true","falseVal","false","newValue","target","checked","DefaultEditor","CompleterEditorComponent","completerService","completerStr","ngOnInit","config","completer","dataService","local","data","searchFields","titleField","descriptionField","onEditedCompleter","title","CompleterService","InputEditorComponent","SelectEditorComponent","TextareaEditorComponent","CustomViewComponent","createCustomComponent","callOnComponentInit","patchInstance","renderComponent","onComponentInitFunction","getOnComponentInitFunction","assign","getPatch","getValue","rowData","getData","changeDetection","ChangeDetectionStrategy","OnPush","CELL_COMPONENTS","ViewCellComponent","NgModule","imports","CommonModule","FormsModule","Ng2CompleterModule","declarations","exports","FilterDefault","filter","query","onFilter","source","addFilter","field","column","id","search","getFilterFunction","FilterComponent","apply","firstChange","dataChangedSub","unsubscribe","onChanged","dataChanges","filterConf","getFilter","filters","forEach","k","v","DefaultFilterComponent","CustomFilterComponent","DefaultFilter","delay","changesSubscription","setFilter","emit","CheckboxFilterComponent","filterActive","inputControl","FormControl","valueChanges","pipe","debounceTime","getFilterConfig","resetFilter","preventDefault","setValue","emitEvent","CompleterFilterComponent","completerContent","Subject","map","ev","distinctUntilChanged","inputTextChanged","InputFilterComponent","SelectFilterComponent","skip","NgControl","FILTER_COMPONENTS","ReactiveFormsModule","PagerComponent","perPageSelect","changePage","count","page","getPaging","perPage","currentPerPage","isPageOutOfBounce","setPage","processPageChange","initPages","getLast","shouldShow","paginate","getPage","prev","getPages","pages","Math","ceil","pagesCount","showPagesCount","middleOne","lastOne","floor","onChangePerPage","toLowerCase","refresh","Ng2SmartTableTbodyComponent","cancel","edit","delete","custom","userSelectRow","editRowSelect","multipleSelectRow","rowHover","defineProperty","actionColumns","isActionAdd","isActionEdit","isActionDelete","getColumns","isMultiSelectVisible","showActionColumnLeft","showActionColumn","getSetting","editInputClass","showActionColumnRight","noDataMessage","getVisibleCells","cells","hide","TbodyCreateCancelComponent","onSave","onCancelEdit","saveButtonContent","cancelButtonContent","TbodyEditDeleteComponent","onEdit","onDelete","deleteConfirm","editRowButtonContent","deleteRowButtonContent","TbodyCustomComponent","isDisabled","action","disabledFunction","onCustom","name","TBODY_COMPONENTS","CellModule","Ng2SmartTableTheadComponent","sort","selectAllRows","isHideHeader","isHideSubHeader","ActionsComponent","createButtonContent","ActionsTitleComponent","ref","ngAfterViewInit","nativeElement","classList","add","actionsColumnTitle","ElementRef","AddButtonComponent","addNewButtonContent","onAdd","createFormShown","TitleComponent","currentDirection","sortConf","getSort","fieldConf","_sort","changeSortDirection","setSort","direction","compare","getCompareFunction","newDirection","sortDirection","TheadFitlersRowComponent","filterInputClass","getVisibleColumns","columns","TheadFormRowComponent","onCreate","addInputClass","TheadTitlesRowComponent","THEAD_COMPONENTS","CheckboxSelectAllComponent","ColumnTitleComponent","FilterModule","deepExtend","objects","_i","val","src","slice","obj","isArray","keys","key","cloneDeep","Deferred","promise","Promise","resolve","reject","getDeepFromObject","object","defaultValue","split","level","getPageForRowIndex","index","Cell","dataSet","getValuePrepareFunction","Function","PREPARE","getId","getTitle","isEditable","isAddable","Row","_dataSet","isSelected","process","getCell","find","el","getCells","getIsSelected","getNewData","values","setData","createCell","defValue","settings","Column","class","width","isSortable","isFilterable","defaultSortDirection","compareFunction","valuePrepareFunction","filterFunction","getFilterType","prepareType","indexOf","prepareSortDirection","determineType","DataSet","columnSettings","rows","createColumns","createNewRow","createRows","getRows","getFirstRow","getLastRow","findRowByData","deselectAll","selectedRow","undefined","selectRow","previousIsSelected","selectPreviousRow","selectFirstRow","selectLastRow","selectRowByIndex","rowsLength","willSelectFirstRow","willSelect","willSelectLastRow","select","selectedRowIndex","newRow","Grid","onSelectRowSource","onDeselectRowSource","setSettings","setSource","detach","sourceOnChangedSubscription","sourceOnUpdatedSubscription","position","isCurrentActionsPosition","isActionsVisible","getDataSet","prepareSource","processDataChange","onUpdated","onSelectRow","asObservable","onDeselectRow","confirmEmitter","deferred","then","newData","skipAdd","prepend","catch","err","confirm","skipEdit","update","remove","shouldProcessChange","determineRowToSelect","getRowIndexToSelect","shouldSkipSelection","initialSource","getInitialSort","setPaging","getPageToSelect","getSelectedRows","status","getSelectionInfo","switchPageToSelectedRowPage","Number","_a","dataAmount","pageToSelect","max","maxPageAmount","min","DataSource","onChangedSource","onAddedSource","onUpdatedSource","onRemovedSource","emitOnChanged","load","onAdded","onRemoved","element","emitOnAdded","append","emitOnRemoved","emitOnUpdated","empty","conf","doEmit","andOperator","getElements","elements","paging","compareValues","a","LocalSorter","customCompare","dir","filterValues","toString","includes","LocalFilter","customFilter","LocalPager","LocalDataSource","filteredAndSorted","pagingConf","reset","unshift","found","Error","prepareData","getFilteredAndSorted","getAll","silent","currentFieldConf","mergedData_1","elem","pos","arr","Ng2SmartTableComponent","rowSelect","rowDeselect","userRowSelect","defaultSettings","selectMode","hideHeader","hideSubHeader","actions","columnTitle","editButtonContent","confirmSave","addButtonContent","confirmCreate","deleteButtonContent","confirmDelete","attr","pager","display","rowClassFunction","isAllSelected","destroyed$","prepareSettings","initGrid","tableId","tableClass","isPagerDisplay","isIndexOutOfRange","deselectAllRows","emitDeselectRow","onMultipleSelectRow","onUserSelectRow","emitUserSelectRow","emitSelectRow","onRowHover","onSelectAllRows","$event","subscribeToOnSelectRow","subscribeToOnDeselectRow","resetAllSelector","selectedRows","selected","onSelectRowSubscription","takeUntil","onDeselectRowSubscription","PagerModule","TBodyModule","THeadModule","ServerSourceConf","_b","_c","endPoint","_d","sortFieldKey","_e","sortDirKey","_f","pagerPageKey","_g","pagerLimitKey","_h","filterFieldKey","_j","totalKey","_k","dataKey","SORT_FIELD_KEY","SORT_DIR_KEY","PAGER_PAGE_KEY","PAGER_LIMIT_KEY","FILTER_FIELD_KEY","TOTAL_KEY","DATA_KEY","ServerDataSource","http","lastRequestCount","requestElements","res","extractTotalFromResponse","extractDataFromResponse","toPromise","rawData","body","headers","has","get","httpParams","createRequesParams","params","observe","HttpParams","addSortRequestParams","addFilterRequestParams","addPagerRequestParams","set","toUpperCase","replace"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { Cell } from '../../lib/data-set/cell';\nimport { Row } from '../../lib/data-set/row';\n\n@Component({\n  selector: 'ng2-smart-table-cell',\n  template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\">\n    </table-cell-edit-mode>\n  `,\n})\nexport class CellComponent {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() createConfirm: EventEmitter<any>;\n  @Input() isNew: boolean;\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n  @Input() mode: string = 'inline';\n  @Input() isInEditing: boolean = false;\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any) {\n    if (this.isNew) {\n      this.grid.create(this.grid.getNewRow(), this.createConfirm);\n    } else {\n      this.grid.save(this.row, this.editConfirm);\n    }\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  template: ''\n})\nexport class EditCellDefault {\n\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any): boolean {\n    this.edited.next(event);\n    return false;\n  }\n\n  onStopEditing(): boolean {\n    this.cell.getRow().isInEditing = false;\n    return false;\n  }\n\n  onClick(event: any) {\n    event.stopPropagation();\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ViewChild,\n  ViewContainerRef,\n  SimpleChanges,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\n\nimport { EditCellDefault } from './edit-cell-default';\n\n@Component({\n  selector: 'table-cell-custom-editor',\n  template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n})\nexport class CustomEditComponent extends EditCellDefault implements OnChanges, OnDestroy {\n\n  customComponent: any;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.cell && !this.customComponent) {\n      const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().editor.component);\n      this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n\n      // set @Inputs and @Outputs of custom component\n      this.customComponent.instance.cell = this.cell;\n      this.customComponent.instance.inputClass = this.inputClass;\n      this.customComponent.instance.onStopEditing.subscribe(() => this.onStopEditing());\n      this.customComponent.instance.onEdited.subscribe((event: any) => this.onEdited(event));\n      this.customComponent.instance.onClick.subscribe((event: any) => this.onClick(event));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { EditCellDefault } from './edit-cell-default';\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-default-editor',\n  templateUrl: './default-edit.component.html',\n})\nexport class DefaultEditComponent extends EditCellDefault {\n\n  constructor() {\n    super();\n  }\n\n  getEditorType(): string {\n    return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-edit-mode',\n  template: `\n      <div [ngSwitch]=\"getEditorType()\">\n        <table-cell-custom-editor *ngSwitchCase=\"'custom'\"\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-custom-editor>\n        <table-cell-default-editor *ngSwitchDefault\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-default-editor>\n      </div>\n    `,\n})\nexport class EditCellComponent {\n\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any): boolean {\n    this.edited.next(event);\n    return false;\n  }\n\n  getEditorType(): string {\n    return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  template: '',\n})\nexport class DefaultEditor implements Editor {\n  @Input() cell: Cell;\n  @Input() inputClass: string;\n\n  @Output() onStopEditing = new EventEmitter<any>();\n  @Output() onEdited = new EventEmitter<any>();\n  @Output() onClick = new EventEmitter<any>();\n}\n\nexport interface Editor {\n  cell: Cell;\n  inputClass: string;\n  onStopEditing: EventEmitter<any>;\n  onEdited: EventEmitter<any>;\n  onClick: EventEmitter<any>;\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'checkbox-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <input [ngClass]=\"inputClass\"\n           type=\"checkbox\"\n           class=\"form-control\"\n           [name]=\"cell.getId()\"\n           [disabled]=\"!cell.isEditable()\"\n           [checked]=\"cell.getValue() == (cell.getColumn().getConfig()?.true || true)\"\n           (click)=\"onClick.emit($event)\"\n           (change)=\"onChange($event)\">\n    `,\n})\nexport class CheckboxEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n\n  onChange(event: any) {\n    const trueVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().true) || true;\n    const falseVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().false) || false;\n    this.cell.newValue = event.target.checked ? trueVal : falseVal;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CompleterService } from 'ng2-completer';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'completer-editor',\n  template: `\n    <ng2-completer [(ngModel)]=\"completerStr\"\n                   [dataService]=\"cell.getColumn().getConfig().completer.dataService\"\n                   [minSearchLength]=\"cell.getColumn().getConfig().completer.minSearchLength || 0\"\n                   [pause]=\"cell.getColumn().getConfig().completer.pause || 0\"\n                   [placeholder]=\"cell.getColumn().getConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"onEditedCompleter($event)\">\n    </ng2-completer>\n    `,\n})\nexport class CompleterEditorComponent extends DefaultEditor implements OnInit {\n\n  completerStr: string = '';\n\n  constructor(private completerService: CompleterService) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.cell.getColumn().editor && this.cell.getColumn().editor.type === 'completer') {\n      const config = this.cell.getColumn().getConfig().completer;\n      config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n      config.dataService.descriptionField(config.descriptionField);\n    }\n  }\n\n  onEditedCompleter(event: { title: '' }): boolean {\n    this.cell.newValue = event.title;\n    return false;\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'input-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <input [ngClass]=\"inputClass\"\n           class=\"form-control\"\n           [(ngModel)]=\"cell.newValue\"\n           [name]=\"cell.getId()\"\n           [placeholder]=\"cell.getTitle()\"\n           [disabled]=\"!cell.isEditable()\"\n           (click)=\"onClick.emit($event)\"\n           (keydown.enter)=\"onEdited.emit($event)\"\n           (keydown.esc)=\"onStopEditing.emit()\">\n    `,\n})\nexport class InputEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'select-editor',\n  template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            [(ngModel)]=\"cell.newValue\"\n            [name]=\"cell.getId()\"\n            [disabled]=\"!cell.isEditable()\"\n            (click)=\"onClick.emit($event)\"\n            (keydown.enter)=\"onEdited.emit($event)\"\n            (keydown.esc)=\"onStopEditing.emit()\">\n\n        <option *ngFor=\"let option of cell.getColumn().getConfig()?.list\" [value]=\"option.value\"\n                [selected]=\"option.value === cell.getValue()\">{{ option.title }}\n        </option>\n    </select>\n    `,\n})\nexport class SelectEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'textarea-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <textarea [ngClass]=\"inputClass\"\n              class=\"form-control\"\n              [(ngModel)]=\"cell.newValue\"\n              [name]=\"cell.getId()\"\n              [disabled]=\"!cell.isEditable()\"\n              [placeholder]=\"cell.getTitle()\"\n              (click)=\"onClick.emit($event)\"\n              (keydown.enter)=\"onEdited.emit($event)\"\n              (keydown.esc)=\"onStopEditing.emit()\">\n    </textarea>\n    `,\n})\nexport class TextareaEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import {\n  Component,\n  Input,\n  ComponentFactoryResolver,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\nimport { ViewCell } from './view-cell';\n\n@Component({\n  selector: 'custom-view-component',\n  template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n})\nexport class CustomViewComponent implements OnInit, OnDestroy {\n\n  customComponent: any;\n  @Input() cell: Cell;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n  }\n\n  ngOnInit() {\n    if (this.cell && !this.customComponent) {\n      this.createCustomComponent();\n      this.callOnComponentInit();\n      this.patchInstance();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n\n  protected createCustomComponent() {\n    const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().renderComponent);\n    this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n  }\n\n  protected callOnComponentInit() {\n    const onComponentInitFunction = this.cell.getColumn().getOnComponentInitFunction();\n    onComponentInitFunction && onComponentInitFunction(this.customComponent.instance);\n  }\n\n  protected patchInstance() {\n    Object.assign(this.customComponent.instance, this.getPatch());\n  }\n\n  protected getPatch(): ViewCell {\n    return {\n      value: this.cell.getValue(),\n      rowData: this.cell.getRow().getData()\n    }\n  }\n}\n","import {Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-view-mode',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div [ngSwitch]=\"cell.getColumn().type\">\n        <custom-view-component *ngSwitchCase=\"'custom'\" [cell]=\"cell\"></custom-view-component>\n        <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.getValue()\"></div>\n        <div *ngSwitchDefault>{{ cell.getValue() }}</div>\n    </div>\n    `,\n})\nexport class ViewCellComponent {\n\n  @Input() cell: Cell;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Ng2CompleterModule } from 'ng2-completer';\n\nimport { CellComponent } from './cell.component';\nimport { CustomEditComponent } from './cell-edit-mode/custom-edit.component';\nimport { DefaultEditComponent } from './cell-edit-mode/default-edit.component';\nimport { EditCellComponent } from './cell-edit-mode/edit-cell.component';\nimport { CheckboxEditorComponent } from './cell-editors/checkbox-editor.component';\nimport { CompleterEditorComponent } from './cell-editors/completer-editor.component';\nimport { InputEditorComponent } from './cell-editors/input-editor.component';\nimport { SelectEditorComponent } from './cell-editors/select-editor.component';\nimport { TextareaEditorComponent } from './cell-editors/textarea-editor.component';\nimport { CustomViewComponent } from './cell-view-mode/custom-view.component';\nimport { ViewCellComponent } from './cell-view-mode/view-cell.component';\nimport { EditCellDefault } from './cell-edit-mode/edit-cell-default';\nimport { DefaultEditor } from './cell-editors/default-editor';\n\nconst CELL_COMPONENTS = [\n  CellComponent,\n  EditCellDefault,\n  DefaultEditor,\n  CustomEditComponent,\n  DefaultEditComponent,\n  EditCellComponent,\n  CheckboxEditorComponent,\n  CompleterEditorComponent,\n  InputEditorComponent,\n  SelectEditorComponent,\n  TextareaEditorComponent,\n  CustomViewComponent,\n  ViewCellComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    Ng2CompleterModule,\n  ],\n  declarations: [\n    ...CELL_COMPONENTS,\n  ],\n  exports: [\n    ...CELL_COMPONENTS,\n  ],\n})\nexport class CellModule { }\n","import { Output, EventEmitter, Input, Component } from '@angular/core';\n\nimport { Column } from '../../lib/data-set/column';\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n  template: '',\n})\nexport class FilterDefault {\n\n  @Input() column: Column;\n  @Input() source: DataSource;\n  @Input() inputClass: string = '';\n\n  @Output() filter = new EventEmitter<any>();\n\n  query: string = '';\n\n  onFilter(query: string) {\n    this.source.addFilter({\n      field: this.column.id,\n      search: query,\n      filter: this.column.getFilterFunction(),\n    });\n  }\n}\n","import { Component, OnChanges, SimpleChanges } from '@angular/core';\nimport { FilterDefault } from './filter-default';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ng2-smart-table-filter',\n  styleUrls: ['./filter.component.scss'],\n  template: `\n      <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\n        <custom-table-filter *ngSwitchCase=\"'custom'\"\n                             [query]=\"query\"\n                             [column]=\"column\"\n                             [source]=\"source\"\n                             [inputClass]=\"inputClass\"\n                             (filter)=\"onFilter($event)\">\n        </custom-table-filter>\n        <default-table-filter *ngSwitchDefault\n                              [query]=\"query\"\n                              [column]=\"column\"\n                              [source]=\"source\"\n                              [inputClass]=\"inputClass\"\n                              (filter)=\"onFilter($event)\">\n        </default-table-filter>\n      </div>\n    `,\n})\nexport class FilterComponent extends FilterDefault implements OnChanges {\n  query: string = '';\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        const filterConf = this.source.getFilter();\n        if (filterConf && filterConf.filters && filterConf.filters.length === 0) {\n          this.query = '';\n\n          // add a check for existing filters an set the query if one exists for this column\n          // this covers instances where the filter is set by user code while maintaining existing functionality\n        } else if (filterConf && filterConf.filters && filterConf.filters.length > 0) {\n          filterConf.filters.forEach((k: any, v: any) => {\n            if (k.field == this.column.id) {\n              this.query = k.search;\n            }\n          });\n        }\n      });\n    }\n  }\n}\n","import {Component, Input} from '@angular/core';\n\nimport {FilterDefault} from \"./filter-default\";\n\n@Component({\n  selector: 'default-table-filter',\n  template: `\n    <ng-container [ngSwitch]=\"column.getFilterType()\">\n      <select-filter *ngSwitchCase=\"'list'\"\n                     [query]=\"query\"\n                     [ngClass]=\"inputClass\"\n                     [column]=\"column\"\n                     (filter)=\"onFilter($event)\">\n      </select-filter>\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\n                       [query]=\"query\"\n                       [ngClass]=\"inputClass\"\n                       [column]=\"column\"\n                       (filter)=\"onFilter($event)\">\n      </checkbox-filter>\n      <completer-filter *ngSwitchCase=\"'completer'\"\n                        [query]=\"query\"\n                        [ngClass]=\"inputClass\"\n                        [column]=\"column\"\n                        (filter)=\"onFilter($event)\">\n      </completer-filter>\n      <input-filter *ngSwitchDefault\n                    [query]=\"query\"\n                    [ngClass]=\"inputClass\"\n                    [column]=\"column\"\n                    (filter)=\"onFilter($event)\">\n      </input-filter>\n    </ng-container>\n  `,\n})\nexport class DefaultFilterComponent extends FilterDefault {\n  @Input() query: string;\n}\n","import {\n  Component,\n  ComponentFactoryResolver, Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { FilterDefault } from './filter-default';\n\n@Component({\n  selector: 'custom-table-filter',\n  template: `<ng-template #dynamicTarget></ng-template>`,\n})\nexport class CustomFilterComponent extends FilterDefault implements OnChanges, OnDestroy {\n  @Input() query: string;\n  customComponent: any;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.column && !this.customComponent) {\n      const componentFactory = this.resolver.resolveComponentFactory(this.column.filter.component);\n      this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n\n      // set @Inputs and @Outputs of custom component\n      this.customComponent.instance.query = this.query;\n      this.customComponent.instance.column = this.column;\n      this.customComponent.instance.source = this.source;\n      this.customComponent.instance.inputClass = this.inputClass;\n      this.customComponent.instance.filter.subscribe((event: any) => this.onFilter(event));\n    }\n    if (this.customComponent) {\n      this.customComponent.instance.ngOnChanges(changes);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n}\n","import { Input, Output, EventEmitter, OnDestroy, Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Column } from '../../../lib/data-set/column';\n\n@Component({\n  template: '',\n})\nexport class DefaultFilter implements Filter, OnDestroy {\n\n  delay: number = 300;\n  changesSubscription: Subscription;\n  @Input() query: string;\n  @Input() inputClass: string;\n  @Input() column: Column;\n  @Output() filter = new EventEmitter<string>();\n\n  ngOnDestroy() {\n    if (this.changesSubscription) {\n      this.changesSubscription.unsubscribe();\n    }\n  }\n\n  setFilter() {\n    this.filter.emit(this.query);\n  }\n}\n\nexport interface Filter {\n\n  delay?: number;\n  changesSubscription?: Subscription;\n  query: string;\n  inputClass: string;\n  column: Column;\n  filter: EventEmitter<string>;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { DefaultFilter } from './default-filter';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'checkbox-filter',\n  template: `\n    <input type=\"checkbox\" [formControl]=\"inputControl\" [ngClass]=\"inputClass\" class=\"form-control\">\n    <a href=\"#\" *ngIf=\"filterActive\"\n                (click)=\"resetFilter($event)\">{{column.getFilterConfig()?.resetText || 'reset'}}</a>\n  `,\n})\nexport class CheckboxFilterComponent extends DefaultFilter implements OnInit {\n\n  filterActive: boolean = false;\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.changesSubscription = this.inputControl.valueChanges\n      .pipe(debounceTime(this.delay))\n      .subscribe((checked: boolean) => {\n        this.filterActive = true;\n        const trueVal = (this.column.getFilterConfig() && this.column.getFilterConfig().true) || true;\n        const falseVal = (this.column.getFilterConfig() && this.column.getFilterConfig().false) || false;\n        this.query = checked ? trueVal : falseVal;\n        this.setFilter();\n      });\n  }\n\n  resetFilter(event: any) {\n    event.preventDefault();\n    this.query = '';\n    this.inputControl.setValue(false, { emitEvent: false });\n    this.filterActive = false;\n    this.setFilter();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CompleterService } from 'ng2-completer';\n\nimport { DefaultFilter } from './default-filter';\nimport { distinctUntilChanged, debounceTime, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'completer-filter',\n  template: `\n    <ng2-completer [(ngModel)]=\"query\"\n                   (ngModelChange)=\"inputTextChanged($event)\"\n                   [dataService]=\"column.getFilterConfig().completer.dataService\"\n                   [minSearchLength]=\"column.getFilterConfig().completer.minSearchLength || 0\"\n                   [pause]=\"column.getFilterConfig().completer.pause || 0\"\n                   [placeholder]=\"column.getFilterConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"completerContent.next($event)\">\n    </ng2-completer>\n  `,\n})\nexport class CompleterFilterComponent extends DefaultFilter implements OnInit {\n\n  completerContent = new Subject<any>();\n\n  constructor(private completerService: CompleterService) {\n    super();\n  }\n\n  ngOnInit() {\n    const config = this.column.getFilterConfig().completer;\n    config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n    config.dataService.descriptionField(config.descriptionField);\n\n    this.changesSubscription = this.completerContent\n      .pipe(\n        map((ev: any) => (ev && ev.title) || ev || ''),\n        distinctUntilChanged(),\n        debounceTime(this.delay)\n      )\n      .subscribe((search: string) => {\n        this.query = search;\n        this.setFilter();\n      });\n  }\n\n  inputTextChanged(event: string) {\n    // workaround to trigger the search event when the home/end buttons are clicked\n    // when this happens the [(ngModel)]=\"query\" is set to \"\" but the (selected) method is not called\n    // so here it gets called manually\n    if (event === '') {\n      this.completerContent.next(event);\n    }\n  }\n}\n","import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, skip } from 'rxjs/operators';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'input-filter',\n  template: `\n    <input\n      [ngClass]=\"inputClass\"\n      [formControl]=\"inputControl\"\n      class=\"form-control\"\n      type=\"text\"\n      placeholder=\"{{ column.title }}\"/>\n  `,\n})\nexport class InputFilterComponent extends DefaultFilter implements OnInit, OnChanges {\n\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.query) {\n      this.inputControl.setValue(this.query);\n    }\n    this.inputControl.valueChanges\n      .pipe(\n        distinctUntilChanged(),\n        debounceTime(this.delay),\n      )\n      .subscribe((value: string) => {\n        this.query = this.inputControl.value;\n        this.setFilter();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.query) {\n      this.inputControl.setValue(this.query);\n    }\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { distinctUntilChanged, debounceTime, skip } from 'rxjs/operators';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'select-filter',\n  template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            #inputControl\n            [(ngModel)]=\"query\">\n\n        <option value=\"\">{{ column.getFilterConfig().selectText }}</option>\n        <option *ngFor=\"let option of column.getFilterConfig().list\" [value]=\"option.value\">\n          {{ option.title }}\n        </option>\n    </select>\n  `,\n})\nexport class SelectFilterComponent extends DefaultFilter implements OnInit {\n\n  @ViewChild('inputControl', { read: NgControl, static: true }) inputControl: NgControl;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.inputControl.valueChanges\n      .pipe(\n        skip(1),\n        distinctUntilChanged(),\n        debounceTime(this.delay)\n      )\n      .subscribe((value: string) => this.setFilter());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Ng2CompleterModule } from 'ng2-completer';\n\nimport { FilterComponent } from './filter.component';\nimport { DefaultFilterComponent } from \"./default-filter.component\";\nimport { CustomFilterComponent } from \"./custom-filter.component\";\nimport { CheckboxFilterComponent } from './filter-types/checkbox-filter.component';\nimport { CompleterFilterComponent } from './filter-types/completer-filter.component';\nimport { InputFilterComponent } from './filter-types/input-filter.component';\nimport { SelectFilterComponent } from './filter-types/select-filter.component';\nimport { DefaultFilter } from './filter-types/default-filter';\nimport { FilterDefault } from './filter-default';\n\nconst FILTER_COMPONENTS = [\n  FilterDefault,\n  DefaultFilter,\n  FilterComponent,\n  DefaultFilterComponent,\n  CustomFilterComponent,\n  CheckboxFilterComponent,\n  CompleterFilterComponent,\n  InputFilterComponent,\n  SelectFilterComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    Ng2CompleterModule,\n  ],\n  declarations: [\n    ...FILTER_COMPONENTS,\n  ],\n  exports: [\n    ...FILTER_COMPONENTS,\n  ],\n})\nexport class FilterModule { }\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-smart-table-pager',\n  styleUrls: ['./pager.component.scss'],\n  template: `\n    <nav *ngIf=\"shouldShow()\" class=\"ng2-smart-pagination-nav\">\n      <ul class=\"ng2-smart-pagination pagination\">\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == 1 ? false : paginate(1)\" aria-label=\"First\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link page-link-prev\" href=\"#\"\n             (click)=\"getPage() == 1 ? false : prev()\" aria-label=\"Prev\">\n            <span aria-hidden=\"true\">&lt;</span>\n            <span class=\"sr-only\">Prev</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{active: getPage() == page}\" *ngFor=\"let page of getPages()\">\n          <span class=\"ng2-smart-page-link page-link\"\n          *ngIf=\"getPage() == page\">{{ page }} <span class=\"sr-only\">(current)</span></span>\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"paginate(page)\" *ngIf=\"getPage() != page\">{{ page }}</a>\n        </li>\n\n        <li class=\"ng2-smart-page-item page-item\"\n            [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link page-link-next\" href=\"#\"\n             (click)=\"getPage() == getLast() ? false : next()\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&gt;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == getLast() ? false : paginate(getLast())\" aria-label=\"Last\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <nav *ngIf=\"perPageSelect && perPageSelect.length > 0\" class=\"ng2-smart-pagination-per-page\">\n      <label for=\"per-page\">\n        Per Page:\n      </label>\n      <select (change)=\"onChangePerPage($event)\" [(ngModel)]=\"currentPerPage\" id=\"per-page\">\n        <option *ngFor=\"let item of perPageSelect\" [value]=\"item\">{{ item }}</option>\n      </select>\n    </nav>\n  `,\n})\nexport class PagerComponent implements OnChanges {\n\n  @Input() source: DataSource;\n  @Input() perPageSelect: any[] = [];\n\n  @Output() changePage = new EventEmitter<any>();\n\n  currentPerPage: any;\n\n  protected pages: Array<any>;\n  protected page: number;\n  protected count: number = 0;\n  protected perPage: number;\n\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        this.page = this.source.getPaging().page;\n        this.perPage = this.source.getPaging().perPage;\n        this.currentPerPage = this.perPage;\n        this.count = this.source.count();\n        if (this.isPageOutOfBounce()) {\n          this.source.setPage(--this.page);\n        }\n\n        this.processPageChange(dataChanges);\n        this.initPages();\n      });\n    }\n  }\n\n  /**\n   * We change the page here depending on the action performed against data source\n   * if a new element was added to the end of the table - then change the page to the last\n   * if a new element was added to the beginning of the table - then to the first page\n   * @param changes\n   */\n  processPageChange(changes: any) {\n    if (changes['action'] === 'prepend') {\n      this.source.setPage(1);\n    }\n    if (changes['action'] === 'append') {\n      this.source.setPage(this.getLast());\n    }\n  }\n\n  shouldShow(): boolean {\n    return this.source.count() > this.perPage;\n  }\n\n  paginate(page: number): boolean {\n    this.source.setPage(page);\n    this.page = page;\n    this.changePage.emit({ page });\n    return false;\n  }\n\n  next(): boolean {\n    return this.paginate(this.getPage() + 1);\n  }\n\n  prev(): boolean {\n    return this.paginate(this.getPage() - 1);\n  }\n\n  getPage(): number {\n    return this.page;\n  }\n\n  getPages(): Array<any> {\n    return this.pages;\n  }\n\n  getLast(): number {\n    return Math.ceil(this.count / this.perPage);\n  }\n\n  isPageOutOfBounce(): boolean {\n    return (this.page * this.perPage) >= (this.count + this.perPage) && this.page > 1;\n  }\n\n  initPages() {\n    const pagesCount = this.getLast();\n    let showPagesCount = 4;\n    showPagesCount = pagesCount < showPagesCount ? pagesCount : showPagesCount;\n    this.pages = [];\n\n    if (this.shouldShow()) {\n\n      let middleOne = Math.ceil(showPagesCount / 2);\n      middleOne = this.page >= middleOne ? this.page : middleOne;\n\n      let lastOne = middleOne + Math.floor(showPagesCount / 2);\n      lastOne = lastOne >= pagesCount ? pagesCount : lastOne;\n\n      const firstOne = lastOne - showPagesCount + 1;\n\n      for (let i = firstOne; i <= lastOne; i++) {\n        this.pages.push(i);\n      }\n    }\n  }\n\n  onChangePerPage(event: any) {\n    if (this.currentPerPage) {\n\n      if (typeof this.currentPerPage === 'string' && this.currentPerPage.toLowerCase() === 'all') {\n        this.source.getPaging().perPage = null;\n      } else {\n        this.source.getPaging().perPage = this.currentPerPage * 1;\n        this.source.refresh();\n      }\n      this.initPages();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PagerComponent } from './pager.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  declarations: [\n    PagerComponent,\n  ],\n  exports: [\n    PagerComponent,\n  ],\n})\nexport class PagerModule { }\n","import {Component, Input, Output, EventEmitter, } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { DataSource } from '../../lib/data-source/data-source';\nimport { Cell } from '../../lib/data-set/cell';\n\n@Component({\n  selector: '[ng2-st-tbody]',\n  styleUrls: ['./tbody.component.scss'],\n  templateUrl: './tbody.component.html',\n})\nexport class Ng2SmartTableTbodyComponent {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Input() deleteConfirm: EventEmitter<any>;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() rowClassFunction: Function;\n\n  @Output() save = new EventEmitter<any>();\n  @Output() cancel = new EventEmitter<any>();\n  @Output() edit = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() custom = new EventEmitter<any>();\n  @Output() edited = new EventEmitter<any>();\n  @Output() userSelectRow = new EventEmitter<any>();\n  @Output() editRowSelect = new EventEmitter<any>();\n  @Output() multipleSelectRow = new EventEmitter<any>();\n  @Output() rowHover = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  mode: string;\n  editInputClass: string;\n  isActionAdd: boolean;\n  isActionEdit: boolean;\n  isActionDelete: boolean;\n  noDataMessage: boolean;\n\n  get tableColumnsCount() {\n    const actionColumns = this.isActionAdd || this.isActionEdit || this.isActionDelete ? 1 : 0;\n    return this.grid.getColumns().length + actionColumns;\n  }\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.mode = this.grid.getSetting('mode');\n    this.editInputClass = this.grid.getSetting('edit.inputClass');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.isActionAdd = this.grid.getSetting('actions.add');\n    this.isActionEdit = this.grid.getSetting('actions.edit');\n    this.isActionDelete = this.grid.getSetting('actions.delete');\n    this.noDataMessage = this.grid.getSetting('noDataMessage');\n  }\n\n  getVisibleCells(cells: Array<Cell>): Array<Cell> {\n    return (cells || []).filter((cell: Cell) => !cell.getColumn().hide);\n  }\n}\n","import { Component, Input, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\n\n@Component({\n  selector: 'ng2-st-tbody-create-cancel',\n  template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-save\"\n        [innerHTML]=\"saveButtonContent\" (click)=\"onSave($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-cancel\"\n        [innerHTML]=\"cancelButtonContent\" (click)=\"onCancelEdit($event)\"></a>\n  `,\n})\nexport class TbodyCreateCancelComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n\n  cancelButtonContent: string;\n  saveButtonContent: string;\n\n  onSave(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.grid.save(this.row, this.editConfirm);\n  }\n\n  onCancelEdit(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.row.isInEditing = false;\n  }\n\n  ngOnChanges() {\n    this.saveButtonContent = this.grid.getSetting('edit.saveButtonContent');\n    this.cancelButtonContent = this.grid.getSetting('edit.cancelButtonContent')\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-st-tbody-edit-delete',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <a href=\"#\" *ngIf=\"isActionEdit\" class=\"ng2-smart-action ng2-smart-action-edit-edit\"\n        [innerHTML]=\"editRowButtonContent\" (click)=\"onEdit($event)\"></a>\n    <a href=\"#\" *ngIf=\"isActionDelete\" class=\"ng2-smart-action ng2-smart-action-delete-delete\"\n        [innerHTML]=\"deleteRowButtonContent\" (click)=\"onDelete($event)\"></a>\n  `,\n})\nexport class TbodyEditDeleteComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() source: DataSource;\n  @Input() deleteConfirm: EventEmitter<any>;\n  @Input() editConfirm: EventEmitter<any>;\n\n  @Output() edit = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() editRowSelect = new EventEmitter<any>();\n\n  isActionEdit: boolean;\n  isActionDelete: boolean;\n  editRowButtonContent: string;\n  deleteRowButtonContent: string;\n\n  onEdit(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.editRowSelect.emit(this.row);\n\n    if (this.grid.getSetting('mode') === 'external') {\n      this.edit.emit({\n        data: this.row.getData(),\n        source: this.source,\n      });\n    } else {\n      this.grid.edit(this.row);\n    }\n  }\n\n  onDelete(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.grid.getSetting('mode') === 'external') {\n      this.delete.emit({\n        data: this.row.getData(),\n        source: this.source,\n      });\n    } else {\n      this.grid.delete(this.row, this.deleteConfirm);\n    }\n  }\n\n  ngOnChanges(){\n    this.isActionEdit = this.grid.getSetting('actions.edit');\n    this.isActionDelete = this.grid.getSetting('actions.delete');\n    this.editRowButtonContent = this.grid.getSetting('edit.editButtonContent');\n    this.deleteRowButtonContent = this.grid.getSetting('delete.deleteButtonContent');\n  }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Row } from '../../../lib/data-set/row';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: 'ng2-st-tbody-custom',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <ng-template ngFor let-action [ngForOf]=\"grid.getSetting('actions.custom')\">\n      <a class=\"ng2-smart-action ng2-smart-action-custom-custom\"\n         [innerHTML]=\"action.title\"\n         [class.disabled]=\"isDisabled(action)\"\n         [attr.disabled]=\"isDisabled(action)\"\n         *ngIf=\"action.hideFunction ? action.hideFunction(row.getData()) : true\"\n         (click)=\"onCustom(action, $event)\"></a>\n    </ng-template>`\n})\nexport class TbodyCustomComponent {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() source: any;\n  @Output() custom = new EventEmitter<any>();\n\n  isDisabled(action: any) {\n    return action.disabledFunction ? action.disabledFunction(this.row.getData()) : false;\n  }\n\n  onCustom(action: any, event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.custom.emit({\n      action: action.name,\n      data: this.row.getData(),\n      source: this.source\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { CellModule } from '../cell/cell.module';\n\nimport { Ng2SmartTableTbodyComponent } from './tbody.component';\nimport { TbodyCreateCancelComponent } from './cells/create-cancel.component';\nimport { TbodyEditDeleteComponent } from './cells/edit-delete.component';\nimport { TbodyCustomComponent } from './cells/custom.component';\n\nconst TBODY_COMPONENTS = [\n  TbodyCreateCancelComponent,\n  TbodyEditDeleteComponent,\n  TbodyCustomComponent,\n  Ng2SmartTableTbodyComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    CellModule,\n  ],\n  declarations: [\n    ...TBODY_COMPONENTS,\n  ],\n  exports: [\n    ...TBODY_COMPONENTS,\n  ],\n})\nexport class TBodyModule { }\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n    selector: '[ng2-st-thead]',\n    templateUrl: './thead.component.html',\n})\nexport class Ng2SmartTableTheadComponent implements OnChanges {\n\n    @Input() grid: Grid;\n    @Input() source: DataSource;\n    @Input() isAllSelected: boolean;\n    @Input() createConfirm: EventEmitter<any>;\n\n    @Output() sort = new EventEmitter<any>();\n    @Output() selectAllRows = new EventEmitter<any>();\n    @Output() create = new EventEmitter<any>();\n    @Output() filter = new EventEmitter<any>();\n\n    isHideHeader: boolean;\n    isHideSubHeader: boolean;\n\n  ngOnChanges() {\n      this.isHideHeader = this.grid.getSetting('hideHeader');\n      this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: 'ng2-st-actions',\n  template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-create\"\n        [innerHTML]=\"createButtonContent\"\n        (click)=\"$event.preventDefault();create.emit($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-cancel\"\n        [innerHTML]=\"cancelButtonContent\"\n        (click)=\"$event.preventDefault();grid.createFormShown = false;\"></a>\n  `,\n})\nexport class ActionsComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Output() create = new EventEmitter<any>();\n\n  createButtonContent: string;\n  cancelButtonContent: string;\n\n  ngOnChanges() {\n    this.createButtonContent = this.grid.getSetting('add.createButtonContent');\n    this.cancelButtonContent = this.grid.getSetting('add.cancelButtonContent');\n  }\n}\n","import {Component, Input, AfterViewInit, ElementRef, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: '[ng2-st-actions-title]',\n  template: `\n    <div class=\"ng2-smart-title\">{{ actionsColumnTitle }}</div>\n  `,\n})\nexport class ActionsTitleComponent implements AfterViewInit, OnChanges {\n\n  @Input() grid: Grid;\n\n  actionsColumnTitle: string;\n\n  constructor(private ref: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.ref.nativeElement.classList.add('ng2-smart-actions');\n  }\n\n  ngOnChanges() {\n    this.actionsColumnTitle = this.grid.getSetting('actions.columnTitle');\n  }\n}\n","import { Component, Input, Output, EventEmitter, AfterViewInit, ElementRef, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: '[ng2-st-add-button]',\n  template: `\n    <a *ngIf=\"isActionAdd\" href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-add\"\n        [innerHTML]=\"addNewButtonContent\" (click)=\"onAdd($event)\"></a>\n  `,\n})\nexport class AddButtonComponent implements AfterViewInit, OnChanges {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Output() create = new EventEmitter<any>();\n\n  isActionAdd: boolean;\n  addNewButtonContent: string;\n\n  constructor(private ref: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.ref.nativeElement.classList.add('ng2-smart-actions-title', 'ng2-smart-actions-title-add');\n  }\n\n  ngOnChanges() {\n    this.isActionAdd = this.grid.getSetting('actions.add');\n    this.addNewButtonContent = this.grid.getSetting('add.addButtonContent');\n  }\n\n  onAdd(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.grid.getSetting('mode') === 'external') {\n      this.create.emit({\n        source: this.source,\n      });\n    } else {\n      this.grid.createFormShown = true;\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: '[ng2-st-checkbox-select-all]',\n  template: `\n    <input type=\"checkbox\" [ngModel]=\"isAllSelected\">\n  `,\n})\nexport class CheckboxSelectAllComponent {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Input() isAllSelected: boolean;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Column } from '../../../lib/data-set/column';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-st-column-title',\n  template: `\n    <div class=\"ng2-smart-title\">\n      <ng2-smart-table-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-smart-table-title>\n    </div>\n  `,\n})\nexport class ColumnTitleComponent {\n\n  @Input() column: Column;\n  @Input() source: DataSource;\n\n  @Output() sort = new EventEmitter<any>();\n\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataSource } from '../../../../lib/data-source/data-source';\nimport { Column } from '../../../../lib/data-set/column';\n\n@Component({\n  selector: 'ng2-smart-table-title',\n  styleUrls: ['./title.component.scss'],\n  template: `\n    <a href=\"#\" *ngIf=\"column.isSortable\"\n                (click)=\"_sort($event)\"\n                class=\"ng2-smart-sort-link sort\"\n                [ngClass]=\"currentDirection\">\n      {{ column.title }}\n    </a>\n    <span class=\"ng2-smart-sort\" *ngIf=\"!column.isSortable\">{{ column.title }}</span>\n  `,\n})\nexport class TitleComponent implements OnChanges {\n\n  currentDirection = '';\n  @Input() column: Column;\n  @Input() source: DataSource;\n  @Output() sort = new EventEmitter<any>();\n\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        const sortConf = this.source.getSort();\n\n        if (sortConf.length > 0 && sortConf[0]['field'] === this.column.id) {\n          this.currentDirection = sortConf[0]['direction'];\n        } else {\n          this.currentDirection = '';\n        }\n\n        sortConf.forEach((fieldConf: any) => {\n\n        });\n      });\n    }\n  }\n\n  _sort(event: any) {\n    event.preventDefault();\n    this.changeSortDirection();\n    this.source.setSort([\n      {\n        field: this.column.id,\n        direction: this.currentDirection,\n        compare: this.column.getCompareFunction(),\n      },\n    ]);\n    this.sort.emit(null);\n  }\n\n  changeSortDirection(): string {\n    if (this.currentDirection) {\n      const newDirection = this.currentDirection === 'asc' ? 'desc' : 'asc';\n      this.currentDirection = newDirection;\n    } else {\n      this.currentDirection = this.column.sortDirection;\n    }\n    return this.currentDirection;\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\nimport { Column } from \"../../../lib/data-set/column\";\n\n@Component({\n  selector: '[ng2-st-thead-filters-row]',\n  template: `\n    <th *ngIf=\"isMultiSelectVisible\"></th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnLeft\"\n                          [grid]=\"grid\"\n                          (create)=\"create.emit($event)\">\n    </th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\" class=\"ng2-smart-th {{ column.id }}\">\n      <ng2-smart-table-filter [source]=\"source\"\n                              [column]=\"column\"\n                              [inputClass]=\"filterInputClass\"\n                              (filter)=\"filter.emit($event)\">\n      </ng2-smart-table-filter>\n    </th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnRight\"\n                          [grid]=\"grid\"\n                          [source]=\"source\"\n                          (create)=\"create.emit($event)\">\n    </th>\n  `,\n})\nexport class TheadFitlersRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n\n  @Output() create = new EventEmitter<any>();\n  @Output() filter = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  filterInputClass: string;\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.filterInputClass = this.grid.getSetting('filter.inputClass');\n  }\n\n  getVisibleColumns(columns: Array<Column>): Array<Column> {\n    return (columns || []).filter((column: Column) => !column.hide);\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: '[ng2-st-thead-form-row]',\n  template: `\n      <td *ngIf=\"\"></td>\n      <td  *ngIf=\"showActionColumnLeft\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n      <td *ngFor=\"let cell of getVisibleCells(grid.getNewRow().getCells())\">\n        <ng2-smart-table-cell [cell]=\"cell\"\n                              [grid]=\"grid\"\n                              [isNew]=\"true\"\n                              [createConfirm]=\"createConfirm\"\n                              [inputClass]=\"addInputClass\"\n                              [isInEditing]=\"grid.getNewRow().isInEditing\"\n                              (edited)=\"onCreate($event)\">\n        </ng2-smart-table-cell>\n      </td>\n      <td  *ngIf=\"showActionColumnRight\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\"></ng2-st-actions>\n      </td>\n  `,\n})\nexport class TheadFormRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() createConfirm: EventEmitter<any>;\n\n  @Output() create = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  addInputClass: string;\n\n  onCreate(event: any) {\n    event.stopPropagation();\n\n    this.grid.create(this.grid.getNewRow(), this.createConfirm);\n  }\n\n  ngOnChanges(){\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.addInputClass = this.grid.getSetting('add.inputClass');\n  }\n\n  getVisibleCells(cells: Array<Cell>): Array<Cell> {\n    return (cells || []).filter((cell: Cell) => !cell.getColumn().hide);\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\nimport { Column } from \"../../../lib/data-set/column\";\n\n@Component({\n  selector: '[ng2-st-thead-titles-row]',\n  template: `\n    <th ng2-st-checkbox-select-all *ngIf=\"isMultiSelectVisible\"\n                                   [grid]=\"grid\"\n                                   [source]=\"source\"\n                                   [isAllSelected]=\"isAllSelected\"\n                                   (click)=\"selectAllRows.emit($event)\">\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnLeft\" [grid]=\"grid\"></th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\"\n        class=\"ng2-smart-th {{ column.id }}\"\n        [ngClass]=\"column.class\"\n        [style.width]=\"column.width\">\n      <ng2-st-column-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-st-column-title>\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnRight\" [grid]=\"grid\"></th>\n  `,\n})\nexport class TheadTitlesRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() isAllSelected: boolean;\n  @Input() source: DataSource;\n\n  @Output() sort = new EventEmitter<any>();\n  @Output() selectAllRows = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n  }\n\n  getVisibleColumns(columns: Array<Column>): Array<Column> {\n    return (columns || []).filter((column: Column) => !column.hide);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { FilterModule } from '../filter/filter.module';\nimport { CellModule } from '../cell/cell.module';\n\nimport { Ng2SmartTableTheadComponent } from './thead.component';\nimport { ActionsComponent } from './cells/actions.component';\nimport { ActionsTitleComponent } from './cells/actions-title.component';\nimport { AddButtonComponent } from './cells/add-button.component';\nimport { CheckboxSelectAllComponent } from './cells/checkbox-select-all.component';\nimport { ColumnTitleComponent } from './cells/column-title.component';\nimport { TitleComponent } from './cells/title/title.component';\nimport { TheadFitlersRowComponent } from './rows/thead-filters-row.component';\nimport { TheadFormRowComponent } from './rows/thead-form-row.component';\nimport { TheadTitlesRowComponent } from './rows/thead-titles-row.component';\n\nconst THEAD_COMPONENTS = [\n  ActionsComponent,\n  ActionsTitleComponent,\n  AddButtonComponent,\n  CheckboxSelectAllComponent,\n  ColumnTitleComponent,\n  TitleComponent,\n  TheadFitlersRowComponent,\n  TheadFormRowComponent,\n  TheadTitlesRowComponent,\n  Ng2SmartTableTheadComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    FilterModule,\n    CellModule,\n  ],\n  declarations: [\n    ...THEAD_COMPONENTS,\n  ],\n  exports: [\n    ...THEAD_COMPONENTS,\n  ],\n})\nexport class THeadModule { }\n","import { cloneDeep } from 'lodash';\n\n/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nexport const deepExtend = function(...objects: Array<any>): any {\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n    return false;\n  }\n\n  if (arguments.length < 2) {\n    return arguments[0];\n  }\n\n  const target = arguments[0];\n\n  // convert arguments to array and cut off target object\n  const args = Array.prototype.slice.call(arguments, 1);\n\n  let val, src;\n\n  args.forEach((obj: any) => {\n    // skip argument if it is array or isn't object\n    if (typeof obj !== 'object' || Array.isArray(obj)) {\n      return;\n    }\n\n    Object.keys(obj).forEach(function (key) {\n      src = target[key]; // source value\n      val = obj[key]; // new value\n\n      // recursion prevention\n      if (val === target) {\n        return;\n\n        /**\n         * if new value isn't object then just overwrite by new value\n         * instead of extending.\n         */\n      } else if (typeof val !== 'object' || val === null) {\n        target[key] = val;\n        return;\n\n        // just clone arrays (and recursive clone objects inside)\n      } else if (Array.isArray(val)) {\n        target[key] = cloneDeep(val);\n        return;\n\n        // overwrite by new value if source isn't object or array\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n        target[key] = deepExtend({}, val);\n        return;\n\n        // source value and new value is objects both, extending...\n      } else {\n        target[key] = deepExtend(src, val);\n        return;\n      }\n    });\n  });\n\n  return target;\n};\n\nexport class Deferred {\n\n  promise: Promise<any>;\n\n  resolve: any;\n  reject: any;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nexport function getDeepFromObject(object = {}, name: string, defaultValue?: any) {\n  const keys = name.split('.');\n  // clone the object\n  let level = deepExtend({}, object);\n  keys.forEach((k) => {\n    if (level && typeof level[k] !== 'undefined') {\n      level = level[k];\n    }\n  });\n\n  return typeof level === 'undefined' ? defaultValue : level;\n}\n\nexport function getPageForRowIndex(index: number, perPage: number): number {\n  // we need to add 1 to convert 0-based index to 1-based page number.\n  return Math.floor(index / perPage) + 1;\n}\n","import { Column } from './column';\nimport { DataSet } from './data-set';\nimport { Row } from './row';\n\nexport function prepareValue (value: any) { return value }\n\nexport class Cell {\n\n  newValue: any = '';\n  protected static PREPARE = prepareValue;\n\n  constructor(protected value: any, protected row: Row, protected column: any, protected dataSet: DataSet) {\n    this.newValue = value;\n  }\n\n  getColumn(): Column {\n    return this.column;\n  }\n\n  getRow(): Row {\n    return this.row;\n  }\n\n  getValue(): any {\n    const valid = this.column.getValuePrepareFunction() instanceof Function;\n    const prepare = valid ? this.column.getValuePrepareFunction() : Cell.PREPARE;\n    return prepare.call(null, this.value, this.row.getData(), this);\n  }\n\n  setValue(value: any): any {\n    this.newValue = value;\n  }\n\n  getId(): string {\n    return this.getColumn().id;\n  }\n\n  getTitle(): string {\n    return this.getColumn().title;\n  }\n\n  isEditable(): boolean {\n    if (this.getRow().index === -1) {\n      return this.getColumn().isAddable;\n    }\n    else {\n      return this.getColumn().isEditable;\n    }\n  }\n\n}\n","import { Cell } from './cell';\nimport { Column } from './column';\nimport { DataSet } from './data-set';\n\nexport class Row {\n\n  isSelected: boolean = false;\n  isInEditing: boolean = false;\n  cells: Array<Cell> = [];\n\n\n  constructor(public index: number, protected data: any, protected _dataSet: DataSet) {\n    this.process();\n  }\n\n  getCell(column: Column): Cell {\n    return this.cells.find(el => el.getColumn() === column);\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  getData(): any {\n    return this.data;\n  }\n\n  getIsSelected(): boolean {\n    return this.isSelected;\n  }\n\n  getNewData(): any {\n    const values = Object.assign({}, this.data);\n    this.getCells().forEach((cell) => values[cell.getColumn().id] = cell.newValue);\n    return values;\n  }\n\n  setData(data: any): any {\n    this.data = data;\n    this.process();\n  }\n\n  process() {\n    this.cells = [];\n    this._dataSet.getColumns().forEach((column: Column) => {\n      const cell = this.createCell(column);\n      this.cells.push(cell);\n    });\n  }\n\n  createCell(column: Column): Cell {\n    const defValue = (column as any).settings.defaultValue ? (column as any).settings.defaultValue : '';\n    const value = typeof this.data[column.id] === 'undefined' ? defValue : this.data[column.id];\n    return new Cell(value, this, column, this._dataSet);\n  }\n}\n","import { DataSet } from './data-set';\n\nexport class Column {\n\n  title: string = '';\n  type: string = '';\n  class: string = '';\n  width: string = '';\n  hide: boolean = false;\n  isSortable: boolean = false;\n  isEditable: boolean = true;\n  isAddable: boolean = true;\n  isFilterable: boolean = false;\n  sortDirection: string = '';\n  defaultSortDirection: string = '';\n  editor: { type: string, config: any, component: any } = { type: '', config: {}, component: null };\n  filter: { type: string, config: any, component: any } = { type: '', config: {}, component: null };\n  renderComponent: any = null;\n  compareFunction: Function;\n  valuePrepareFunction: Function;\n  filterFunction: Function;\n  onComponentInitFunction: Function;\n\n  constructor(public id: string, protected settings: any, protected dataSet: DataSet) {\n    this.process();\n  }\n\n  getOnComponentInitFunction(): Function {\n    return this.onComponentInitFunction;\n  }\n\n  getCompareFunction(): Function {\n    return this.compareFunction;\n  }\n\n  getValuePrepareFunction(): Function {\n    return this.valuePrepareFunction;\n  }\n\n  getFilterFunction(): Function {\n    return this.filterFunction;\n  }\n\n  getConfig(): any {\n    return this.editor && this.editor.config;\n  }\n\n  getFilterType(): any {\n    return this.filter && this.filter.type;\n  }\n\n  getFilterConfig(): any {\n    return this.filter && this.filter.config;\n  }\n\n  protected process() {\n    this.title = this.settings['title'];\n    this.class = this.settings['class'];\n    this.width = this.settings['width'];\n    this.hide = !!this.settings['hide'];\n    this.type = this.prepareType();\n    this.editor = this.settings['editor'];\n    this.filter = this.settings['filter'];\n    this.renderComponent = this.settings['renderComponent'];\n\n    this.isFilterable = typeof this.settings['filter'] === 'undefined' ? true : !!this.settings['filter'];\n    this.defaultSortDirection = ['asc', 'desc']\n      .indexOf(this.settings['sortDirection']) !== -1 ? this.settings['sortDirection'] : '';\n    this.isSortable = typeof this.settings['sort'] === 'undefined' ? true : !!this.settings['sort'];\n    this.isEditable = typeof this.settings['editable'] === 'undefined' ? true : !!this.settings['editable'];\n    this.isAddable=typeof this.settings['addable'] === 'undefined' ? true : !!this.settings['addable'];\n    this.sortDirection = this.prepareSortDirection();\n\n    this.compareFunction = this.settings['compareFunction'];\n    this.valuePrepareFunction = this.settings['valuePrepareFunction'];\n    this.filterFunction = this.settings['filterFunction'];\n    this.onComponentInitFunction = this.settings['onComponentInitFunction'];\n  }\n\n  prepareType(): string {\n    return this.settings['type'] || this.determineType();\n  }\n\n  prepareSortDirection(): string {\n    return this.settings['sort'] === 'desc' ? 'desc' : 'asc';\n  }\n\n  determineType(): string {\n    // TODO: determine type by data\n    return 'text';\n  }\n}\n","import { Row } from './row';\nimport { Column } from './column';\n\nexport class DataSet {\n\n  newRow: Row;\n\n  protected data: Array<any> = [];\n  protected columns: Array<Column> = [];\n  protected rows: Array<Row> = [];\n  protected selectedRow: Row;\n  protected willSelect: string;\n\n  constructor(data: Array<any> = [], protected columnSettings: Object) {\n    this.createColumns(columnSettings);\n    this.setData(data);\n\n    this.createNewRow();\n  }\n\n  setData(data: Array<any>) {\n    this.data = data;\n    this.createRows();\n  }\n\n  getColumns(): Array<Column> {\n    return this.columns;\n  }\n\n  getRows(): Array<Row> {\n    return this.rows;\n  }\n\n  getFirstRow(): Row {\n    return this.rows[0];\n  }\n\n  getLastRow(): Row {\n    return this.rows[this.rows.length - 1];\n  }\n\n  findRowByData(data: any): Row {\n    return this.rows.find((row: Row) => row.getData() === data);\n  }\n\n  deselectAll() {\n    this.rows.forEach((row) => {\n      row.isSelected = false;\n    });\n    // we need to clear selectedRow field because no one row selected\n    this.selectedRow = undefined;\n  }\n\n  selectRow(row: Row): Row | undefined {\n    const previousIsSelected = row.isSelected;\n    this.deselectAll();\n\n    row.isSelected = !previousIsSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  multipleSelectRow(row: Row): Row {\n    row.isSelected = !row.isSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  selectPreviousRow(): Row {\n    if (this.rows.length > 0) {\n      let index = this.selectedRow ? this.selectedRow.index : 0;\n      if (index > this.rows.length - 1) {\n        index = this.rows.length - 1;\n      }\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n  }\n\n  selectFirstRow(): Row | undefined {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[0]);\n      return this.selectedRow;\n    }\n  }\n\n  selectLastRow(): Row | undefined {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[this.rows.length - 1]);\n      return this.selectedRow;\n    }\n  }\n\n  selectRowByIndex(index: number): Row | undefined {\n    const rowsLength: number = this.rows.length;\n    if (rowsLength === 0) {\n      return;\n    }\n    if (!index) {\n      this.selectFirstRow();\n      return this.selectedRow;\n    }\n    if (index > 0 && index < rowsLength) {\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n    // we need to deselect all rows if we got an incorrect index\n    this.deselectAll();\n  }\n\n  willSelectFirstRow() {\n    this.willSelect = 'first';\n  }\n\n  willSelectLastRow() {\n    this.willSelect = 'last';\n  }\n\n  select(selectedRowIndex?: number): Row | undefined {\n    if (this.getRows().length === 0) {\n      return;\n    }\n    if (this.willSelect) {\n      if (this.willSelect === 'first') {\n        this.selectFirstRow();\n      }\n      if (this.willSelect === 'last') {\n        this.selectLastRow();\n      }\n      this.willSelect = '';\n    } else {\n      this.selectRowByIndex(selectedRowIndex);\n    }\n\n    return this.selectedRow;\n  }\n\n  createNewRow() {\n    this.newRow = new Row(-1, {}, this);\n    this.newRow.isInEditing = true;\n  }\n\n  /**\n   * Create columns by mapping from the settings\n   * @param settings\n   * @private\n   */\n  createColumns(settings: any) {\n    for (const id in settings) {\n      if (settings.hasOwnProperty(id)) {\n        this.columns.push(new Column(id, settings[id], this));\n      }\n    }\n  }\n\n  /**\n   * Create rows based on current data prepared in data source\n   * @private\n   */\n  createRows() {\n    this.rows = [];\n    this.data.forEach((el, index) => {\n      this.rows.push(new Row(index, el, this));\n    });\n  }\n}\n","import { Subject, Subscription } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\n\nimport { Deferred, getDeepFromObject, getPageForRowIndex } from './helpers';\nimport { Column } from './data-set/column';\nimport { Row } from './data-set/row';\nimport { DataSet } from './data-set/data-set';\nimport { DataSource } from './data-source/data-source';\n\nexport class Grid {\n\n  createFormShown: boolean = false;\n\n  source: DataSource;\n  settings: any;\n  dataSet: DataSet;\n\n  onSelectRowSource = new Subject<any>();\n  onDeselectRowSource = new Subject<any>();\n\n  private sourceOnChangedSubscription: Subscription;\n  private sourceOnUpdatedSubscription: Subscription;\n\n  constructor(source: DataSource, settings: any) {\n    this.setSettings(settings);\n    this.setSource(source);\n  }\n\n  detach(): void {\n    if (this.sourceOnChangedSubscription) {\n      this.sourceOnChangedSubscription.unsubscribe();\n    }\n    if (this.sourceOnUpdatedSubscription) {\n      this.sourceOnUpdatedSubscription.unsubscribe();\n    }\n  }\n\n  showActionColumn(position: string): boolean {\n    return this.isCurrentActionsPosition(position) && this.isActionsVisible();\n  }\n\n  isCurrentActionsPosition(position: string): boolean {\n    return position == this.getSetting('actions.position');\n  }\n\n  isActionsVisible(): boolean {\n    return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\n  }\n\n  isMultiSelectVisible(): boolean {\n    return this.getSetting('selectMode') === 'multi';\n  }\n\n  getNewRow(): Row {\n    return this.dataSet.newRow;\n  }\n\n  setSettings(settings: Object) {\n    this.settings = settings;\n    this.dataSet = new DataSet([], this.getSetting('columns'));\n\n    if (this.source) {\n      this.source.refresh();\n    }\n  }\n\n  getDataSet(): DataSet {\n    return this.dataSet;\n  }\n\n  setSource(source: DataSource) {\n    this.source = this.prepareSource(source);\n    this.detach();\n\n    this.sourceOnChangedSubscription = this.source.onChanged().subscribe((changes: any) => this.processDataChange(changes));\n\n    this.sourceOnUpdatedSubscription = this.source.onUpdated().subscribe((data: any) => {\n      const changedRow = this.dataSet.findRowByData(data);\n      changedRow.setData(data);\n    });\n  }\n\n  getSetting(name: string, defaultValue?: any): any {\n    return getDeepFromObject(this.settings, name, defaultValue);\n  }\n\n  getColumns(): Array<Column> {\n    return this.dataSet.getColumns();\n  }\n\n  getRows(): Array<Row> {\n    return this.dataSet.getRows();\n  }\n\n  selectRow(row: Row) {\n    this.dataSet.selectRow(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.dataSet.multipleSelectRow(row);\n  }\n\n  onSelectRow(): Observable<any> {\n    return this.onSelectRowSource.asObservable();\n  }\n\n  onDeselectRow(): Observable<any> {\n    return this.onDeselectRowSource.asObservable();\n  }\n\n  edit(row: Row) {\n    row.isInEditing = true;\n  }\n\n  create(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipAdd) {\n        this.createFormShown = false;\n      } else {\n        this.source.prepend(newData).then(() => {\n          this.createFormShown = false;\n          this.dataSet.createNewRow();\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('add.confirmCreate')) {\n      confirmEmitter.emit({\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  save(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipEdit) {\n        row.isInEditing = false;\n      } else {\n        this.source.update(row.getData(), newData).then(() => {\n          row.isInEditing = false;\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('edit.confirmSave')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  delete(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then(() => {\n      this.source.remove(row.getData());\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('delete.confirmDelete')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  processDataChange(changes: any) {\n    if (this.shouldProcessChange(changes)) {\n      this.dataSet.setData(changes['elements']);\n      if (this.getSetting('selectMode') !== 'multi') {\n        const row = this.determineRowToSelect(changes);\n\n        if (row) {\n          this.onSelectRowSource.next(row);\n        } else {\n          this.onDeselectRowSource.next(null);\n        }\n      }\n    }\n  }\n\n  shouldProcessChange(changes: any): boolean {\n    if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\n      return true;\n    } else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @breaking-change 1.8.0\n   * Need to add `| null` in return type\n   *\n   * TODO: move to selectable? Separate directive\n   */\n  determineRowToSelect(changes: any): Row {\n\n    if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\n      return this.dataSet.select(this.getRowIndexToSelect());\n    }\n\n    if (this.shouldSkipSelection()) {\n      return null;\n    }\n\n    if (changes['action'] === 'remove') {\n      if (changes['elements'].length === 0) {\n        // we have to store which one to select as the data will be reloaded\n        this.dataSet.willSelectLastRow();\n      } else {\n        return this.dataSet.selectPreviousRow();\n      }\n    }\n    if (changes['action'] === 'append') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectLastRow();\n    }\n    if (changes['action'] === 'add') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'update') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'prepend') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectFirstRow();\n    }\n    return null;\n  }\n\n  prepareSource(source: any): DataSource {\n    const initialSource: any = this.getInitialSort();\n    if (initialSource && initialSource['field'] && initialSource['direction']) {\n      source.setSort([initialSource], false);\n    }\n    if (this.getSetting('pager.display') === true) {\n      source.setPaging(this.getPageToSelect(source), this.getSetting('pager.perPage'), false);\n    }\n\n    source.refresh();\n    return source;\n  }\n\n  getInitialSort() {\n    const sortConf: any = {};\n    this.getColumns().forEach((column: Column) => {\n      if (column.isSortable && column.defaultSortDirection) {\n        sortConf['field'] = column.id;\n        sortConf['direction'] = column.defaultSortDirection;\n        sortConf['compare'] = column.getCompareFunction();\n      }\n    });\n    return sortConf;\n  }\n\n  getSelectedRows(): Array<any> {\n    return this.dataSet.getRows()\n      .filter(r => r.isSelected);\n  }\n\n  selectAllRows(status: any) {\n    this.dataSet.getRows()\n      .forEach(r => r.isSelected = status);\n  }\n\n  getFirstRow(): Row {\n    return this.dataSet.getFirstRow();\n  }\n\n  getLastRow(): Row {\n    return this.dataSet.getLastRow();\n  }\n\n  private getSelectionInfo(): { perPage: number, page: number, selectedRowIndex: number, switchPageToSelectedRowPage: boolean } {\n    const switchPageToSelectedRowPage: boolean = this.getSetting('switchPageToSelectedRowPage');\n    const selectedRowIndex: number = Number(this.getSetting('selectedRowIndex', 0)) || 0;\n    const { perPage, page }: { perPage: number, page: number } = this.getSetting('pager');\n    return { perPage, page, selectedRowIndex, switchPageToSelectedRowPage };\n  }\n\n  private getRowIndexToSelect(): number {\n    const { switchPageToSelectedRowPage, selectedRowIndex, perPage } = this.getSelectionInfo();\n    const dataAmount: number = this.source.count();\n    /**\n     * source - contains all table data\n     * dataSet - contains data for current page\n     * selectedRowIndex - contains index for data in all data\n     *\n     * because of that, we need to count index for a specific row in page\n     * if\n     * `switchPageToSelectedRowPage` - we need to change page automatically\n     * `selectedRowIndex < dataAmount && selectedRowIndex >= 0` - index points to existing data\n     * (if index points to non-existing data and we calculate index for current page - we will get wrong selected row.\n     *  if we return index witch not points to existing data - no line will be highlighted)\n     */\n    return (\n      switchPageToSelectedRowPage &&\n      selectedRowIndex < dataAmount &&\n      selectedRowIndex >= 0\n    ) ?\n      selectedRowIndex % perPage :\n      selectedRowIndex;\n  }\n\n  private getPageToSelect(source: DataSource): number {\n    const { switchPageToSelectedRowPage, selectedRowIndex, perPage, page } = this.getSelectionInfo();\n    let pageToSelect: number = Math.max(1, page);\n    if (switchPageToSelectedRowPage && selectedRowIndex >= 0) {\n      pageToSelect = getPageForRowIndex(selectedRowIndex, perPage);\n    }\n    const maxPageAmount: number = Math.ceil(source.count() / perPage);\n    return maxPageAmount ? Math.min(pageToSelect, maxPageAmount) : pageToSelect;\n  }\n\n  private shouldSkipSelection(): boolean {\n    /**\n     * For backward compatibility when using `selectedRowIndex` with non-number values - ignored.\n     *\n     * Therefore, in order to select a row after some changes,\n     * the `selectedRowIndex` value must be invalid or >= 0 (< 0 means that no row is selected).\n     *\n     * `Number(value)` returns `NaN` on all invalid cases, and comparisons with `NaN` always return `false`.\n     *\n     * !!! We should skip a row only in cases when `selectedRowIndex` < 0\n     * because when < 0 all lines must be deselected\n     */\n    const selectedRowIndex = Number(this.getSetting('selectedRowIndex'));\n    return selectedRowIndex < 0;\n  }\n}\n","import { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\nexport abstract class DataSource {\n\n  protected onChangedSource = new Subject<any>();\n  protected onAddedSource = new Subject<any>();\n  protected onUpdatedSource = new Subject<any>();\n  protected onRemovedSource = new Subject<any>();\n\n  abstract getAll(): Promise<any>;\n  abstract getElements(): Promise<any>;\n  abstract getSort(): any;\n  abstract getFilter(): any;\n  abstract getPaging(): any;\n  abstract count(): number;\n\n  refresh() {\n    this.emitOnChanged('refresh');\n  }\n\n  load(data: Array<any>): Promise<any> {\n    this.emitOnChanged('load');\n    return Promise.resolve();\n  }\n\n  onChanged(): Observable<any> {\n    return this.onChangedSource.asObservable();\n  }\n\n  onAdded(): Observable<any> {\n    return this.onAddedSource.asObservable();\n  }\n\n  onUpdated(): Observable<any> {\n    return this.onUpdatedSource.asObservable();\n  }\n\n  onRemoved(): Observable<any> {\n    return this.onRemovedSource.asObservable();\n  }\n\n  prepend(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('prepend');\n    return Promise.resolve();\n  }\n\n  append(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('append');\n    return Promise.resolve();\n  }\n\n  add(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('add');\n    return Promise.resolve();\n  }\n\n  remove(element: any): Promise<any> {\n    this.emitOnRemoved(element);\n    this.emitOnChanged('remove');\n    return Promise.resolve();\n  }\n\n  update(element: any, values: any): Promise<any> {\n    this.emitOnUpdated(element);\n    this.emitOnChanged('update');\n    return Promise.resolve();\n  }\n\n  empty(): Promise<any> {\n    this.emitOnChanged('empty');\n    return Promise.resolve();\n  }\n\n  setSort(conf: Array<any>, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('sort');\n    }\n  }\n\n  setFilter(conf: Array<any>, andOperator?: boolean, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n\n  addFilter(fieldConf: {}, andOperator?: boolean, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n\n  setPaging(page: number, perPage: number, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('paging');\n    }\n  }\n\n  setPage(page: number, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('page');\n    }\n  }\n\n  protected emitOnRemoved(element: any) {\n    this.onRemovedSource.next(element);\n  }\n\n  protected emitOnUpdated(element: any) {\n    this.onUpdatedSource.next(element);\n  }\n\n  protected emitOnAdded(element: any) {\n    this.onAddedSource.next(element);\n  }\n\n  protected emitOnChanged(action: string) {\n    this.getElements().then((elements) => this.onChangedSource.next({\n      action: action,\n      elements: elements,\n      paging: this.getPaging(),\n      filter: this.getFilter(),\n      sort: this.getSort(),\n    }));\n  }\n}\n","export function compareValues(direction: any, a: any, b: any) {\n  if (a < b) {\n    return -1 * direction;\n  }\n  if (a > b) {\n    return direction;\n  }\n  return 0;\n}\n\nexport class LocalSorter {\n\n  static sort(data: Array<any>, field: string, direction: string, customCompare?: Function): Array<any> {\n\n    const dir: number = (direction === 'asc') ? 1 : -1;\n    const compare: Function = customCompare ? customCompare : compareValues;\n\n    return data.sort((a, b) => {\n      return compare.call(null, dir, a[field], b[field]);\n    });\n  }\n}\n","export function filterValues(value: string, search: string) {\n  return value.toString().toLowerCase().includes(search.toString().toLowerCase());\n}\n\nexport class LocalFilter {\n\n  static filter(data: Array<any>, field: string, search: string, customFilter?: Function): Array<any> {\n    const filter: Function = customFilter ? customFilter : filterValues;\n\n    return data.filter((el) => {\n      const value = typeof el[field] === 'undefined' || el[field] === null ? '' : el[field];\n      return filter.call(null, value, search);\n    });\n  }\n}\n","export class LocalPager {\n\n  static paginate(data: Array<any>, page: number, perPage: number): Array<any> {\n    return data.slice(perPage * (page - 1), perPage * page);\n  }\n}\n","import { LocalSorter } from './local.sorter';\nimport { LocalFilter } from './local.filter';\nimport { LocalPager } from './local.pager';\nimport { DataSource } from '../data-source';\nimport { deepExtend } from '../../helpers';\n\nexport class LocalDataSource extends DataSource {\n\n  protected data: Array<any> = [];\n  protected filteredAndSorted: Array<any> = [];\n  protected sortConf: Array<any> = [];\n  protected filterConf: any = {\n    filters: [],\n    andOperator: true,\n  };\n  protected pagingConf: any = {};\n\n  constructor(data: Array<any> = []) {\n    super();\n\n    this.data = data;\n  }\n\n  load(data: Array<any>): Promise<any> {\n    this.data = data;\n\n    return super.load(data);\n  }\n\n  prepend(element: any): Promise<any> {\n    this.reset(true);\n\n    this.data.unshift(element);\n    return super.prepend(element);\n  }\n\n  append(element: any): Promise<any> {\n    this.reset(true);\n\n    this.data.push(element);\n    return super.append(element);\n  }\n\n  add(element: any): Promise<any> {\n    this.data.push(element);\n\n    return super.add(element);\n  }\n\n  remove(element: any): Promise<any> {\n    this.data = this.data.filter(el => el !== element);\n\n    return super.remove(element);\n  }\n\n  update(element: any, values: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.find(element).then((found) => {\n        found = deepExtend(found, values);\n        super.update(found, values).then(resolve).catch(reject);\n      }).catch(reject);\n    });\n  }\n\n  find(element: any): Promise<any> {\n    const found = this.data.find(el => el === element);\n    if (found) {\n      return Promise.resolve(found);\n    }\n\n    return Promise.reject(new Error('Element was not found in the dataset'));\n  }\n\n  getElements(): Promise<any> {\n    const data = this.data.slice(0);\n    return Promise.resolve(this.prepareData(data));\n  }\n\n  getFilteredAndSorted(): Promise<any> {\n    let data = this.data.slice(0);\n    this.prepareData(data);\n    return Promise.resolve(this.filteredAndSorted);\n  }\n\n  getAll(): Promise<any> {\n    const data = this.data.slice(0);\n    return Promise.resolve(data);\n  }\n\n  reset(silent = false) {\n    if (silent) {\n      this.filterConf = {\n        filters: [],\n        andOperator: true,\n      };\n      this.sortConf = [];\n      this.pagingConf['page'] = 1;\n    } else {\n      this.setFilter([], true, false);\n      this.setSort([], false);\n      this.setPage(1);\n    }\n  }\n\n  empty(): Promise<any> {\n    this.data = [];\n\n    return super.empty();\n  }\n\n  count(): number {\n    return this.filteredAndSorted.length;\n  }\n\n  /**\n   *\n   * Array of conf objects\n   * [\n   *  {field: string, direction: asc|desc|null, compare: Function|null},\n   * ]\n   * @param conf\n   * @param doEmit\n   * @returns {LocalDataSource}\n   */\n  setSort(conf: Array<any>, doEmit = true): LocalDataSource {\n    if (conf !== null) {\n\n      conf.forEach((fieldConf) => {\n        if (!fieldConf['field'] || typeof fieldConf['direction'] === 'undefined') {\n          throw new Error('Sort configuration object is not valid');\n        }\n      });\n      this.sortConf = conf;\n    }\n\n    super.setSort(conf, doEmit);\n    return this;\n  }\n\n  /**\n   *\n   * Array of conf objects\n   * [\n   *  {field: string, search: string, filter: Function|null},\n   * ]\n   * @param conf\n   * @param andOperator\n   * @param doEmit\n   * @returns {LocalDataSource}\n   */\n  setFilter(conf: Array<any>, andOperator = true, doEmit = true): LocalDataSource {\n    if (conf && conf.length > 0) {\n      conf.forEach((fieldConf) => {\n        this.addFilter(fieldConf, andOperator, false);\n      });\n    } else {\n      this.filterConf = {\n        filters: [],\n        andOperator: true,\n      };\n    }\n    this.filterConf.andOperator = andOperator;\n    this.pagingConf['page'] = 1;\n\n    super.setFilter(conf, andOperator, doEmit);\n    return this;\n  }\n\n  addFilter(fieldConf: any, andOperator = true, doEmit: boolean = true): LocalDataSource {\n    if (!fieldConf['field'] || typeof fieldConf['search'] === 'undefined') {\n      throw new Error('Filter configuration object is not valid');\n    }\n\n    let found = false;\n    this.filterConf.filters.forEach((currentFieldConf: any, index: any) => {\n      if (currentFieldConf['field'] === fieldConf['field']) {\n        this.filterConf.filters[index] = fieldConf;\n        found = true;\n      }\n    });\n    if (!found) {\n      this.filterConf.filters.push(fieldConf);\n    }\n    this.filterConf.andOperator = andOperator;\n    super.addFilter(fieldConf, andOperator, doEmit);\n    return this;\n  }\n\n  setPaging(page: number, perPage: number, doEmit: boolean = true): LocalDataSource {\n    this.pagingConf['page'] = page;\n    this.pagingConf['perPage'] = perPage;\n\n    super.setPaging(page, perPage, doEmit);\n    return this;\n  }\n\n  setPage(page: number, doEmit: boolean = true): LocalDataSource {\n    this.pagingConf['page'] = page;\n    super.setPage(page, doEmit);\n    return this;\n  }\n\n  getSort(): any {\n    return this.sortConf;\n  }\n\n  getFilter(): any {\n    return this.filterConf;\n  }\n\n  getPaging(): any {\n    return this.pagingConf;\n  }\n\n  protected prepareData(data: Array<any>): Array<any> {\n    data = this.filter(data);\n    data = this.sort(data);\n    this.filteredAndSorted = data.slice(0);\n\n    return this.paginate(data);\n  }\n\n  protected sort(data: Array<any>): Array<any> {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        data = LocalSorter\n          .sort(data, fieldConf['field'], fieldConf['direction'], fieldConf['compare']);\n      });\n    }\n    return data;\n  }\n\n  // TODO: refactor?\n  protected filter(data: Array<any>): Array<any> {\n    if (this.filterConf.filters) {\n      if (this.filterConf.andOperator) {\n        this.filterConf.filters.forEach((fieldConf: any) => {\n          if (fieldConf['search'].length > 0) {\n            data = LocalFilter\n              .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']);\n          }\n        });\n      } else {\n        let mergedData: any = [];\n        this.filterConf.filters.forEach((fieldConf: any) => {\n          if (fieldConf['search'].length > 0) {\n            mergedData = mergedData.concat(LocalFilter\n              .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']));\n          }\n        });\n        // remove non unique items\n        data = mergedData.filter((elem: any, pos: any, arr: any) => {\n          return arr.indexOf(elem) === pos;\n        });\n      }\n    }\n    return data;\n  }\n\n  protected paginate(data: Array<any>): Array<any> {\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      data = LocalPager.paginate(data, this.pagingConf['page'], this.pagingConf['perPage']);\n    }\n    return data;\n  }\n}\n","import { Component, Input, Output, SimpleChange, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { Grid } from './lib/grid';\nimport { DataSource } from './lib/data-source/data-source';\nimport { Row } from './lib/data-set/row';\nimport { deepExtend, getPageForRowIndex } from './lib/helpers';\nimport { LocalDataSource } from './lib/data-source/local/local.data-source';\n\n@Component({\n  selector: 'ng2-smart-table',\n  styleUrls: ['./ng2-smart-table.component.scss'],\n  templateUrl: './ng2-smart-table.component.html',\n})\nexport class Ng2SmartTableComponent implements OnChanges, OnDestroy {\n\n  @Input() source: any;\n  @Input() settings: Object = {};\n\n  @Output() rowSelect = new EventEmitter<any>();\n  @Output() rowDeselect = new EventEmitter<any>();\n  @Output() userRowSelect = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() edit = new EventEmitter<any>();\n  @Output() create = new EventEmitter<any>();\n  @Output() custom = new EventEmitter<any>();\n  @Output() deleteConfirm = new EventEmitter<any>();\n  @Output() editConfirm = new EventEmitter<any>();\n  @Output() createConfirm = new EventEmitter<any>();\n  @Output() rowHover: EventEmitter<any> = new EventEmitter<any>();\n\n  tableClass: string;\n  tableId: string;\n  perPageSelect: any;\n  isHideHeader: boolean;\n  isHideSubHeader: boolean;\n  isPagerDisplay: boolean;\n  rowClassFunction: Function;\n\n  grid: Grid;\n  defaultSettings: Object = {\n    mode: 'inline', // inline|external|click-to-edit\n    selectMode: 'single', // single|multi\n    /**\n     * Points to an element in all data\n     *\n     * when < 0 all lines must be deselected\n     */\n    selectedRowIndex: 0,\n    switchPageToSelectedRowPage: false,\n    hideHeader: false,\n    hideSubHeader: false,\n    actions: {\n      columnTitle: 'Actions',\n      add: true,\n      edit: true,\n      delete: true,\n      custom: [],\n      position: 'left', // left|right\n    },\n    filter: {\n      inputClass: '',\n    },\n    edit: {\n      inputClass: '',\n      editButtonContent: 'Edit',\n      saveButtonContent: 'Update',\n      cancelButtonContent: 'Cancel',\n      confirmSave: false,\n    },\n    add: {\n      inputClass: '',\n      addButtonContent: 'Add New',\n      createButtonContent: 'Create',\n      cancelButtonContent: 'Cancel',\n      confirmCreate: false,\n    },\n    delete: {\n      deleteButtonContent: 'Delete',\n      confirmDelete: false,\n    },\n    attr: {\n      id: '',\n      class: '',\n    },\n    noDataMessage: 'No data found',\n    columns: {},\n    pager: {\n      display: true,\n      page: 1,\n      perPage: 10,\n    },\n    rowClassFunction: () => '',\n  };\n\n  isAllSelected: boolean = false;\n\n  private onSelectRowSubscription: Subscription;\n  private onDeselectRowSubscription: Subscription;\n  private destroyed$: Subject<void> = new Subject<void>();\n\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n    if (this.grid) {\n      if (changes['settings']) {\n        this.grid.setSettings(this.prepareSettings());\n      }\n      if (changes['source']) {\n        this.source = this.prepareSource();\n        this.grid.setSource(this.source);\n      }\n    } else {\n      this.initGrid();\n    }\n    this.tableId = this.grid.getSetting('attr.id');\n    this.tableClass = this.grid.getSetting('attr.class');\n    this.isHideHeader = this.grid.getSetting('hideHeader');\n    this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.perPageSelect = this.grid.getSetting('pager.perPageSelect');\n    this.rowClassFunction = this.grid.getSetting('rowClassFunction');\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n  }\n\n  selectRow(index: number, switchPageToSelectedRowPage: boolean = this.grid.getSetting('switchPageToSelectedRowPage')): void {\n    if (!this.grid) {\n      return;\n    }\n    this.grid.settings.selectedRowIndex = index;\n    if (this.isIndexOutOfRange(index)) {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n      return;\n    }\n\n    if (switchPageToSelectedRowPage) {\n      const source: DataSource = this.source;\n      const paging: { page: number, perPage: number } = source.getPaging();\n      const page: number = getPageForRowIndex(index, paging.perPage);\n      index = index % paging.perPage;\n      this.grid.settings.selectedRowIndex = index;\n\n      if (page !== paging.page) {\n        source.setPage(page);\n        return;\n      }\n\n    }\n\n    const row: Row = this.grid.getRows()[index];\n    if (row) {\n      this.onSelectRow(row);\n    } else {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n    }\n  }\n\n  private deselectAllRows(): void {\n    this.grid.dataSet.deselectAll();\n    this.emitDeselectRow(null);\n  }\n\n  editRowSelect(row: Row) {\n    if (this.grid.getSetting('selectMode') === 'multi') {\n      this.onMultipleSelectRow(row);\n    } else {\n      this.onSelectRow(row);\n    }\n  }\n\n  onUserSelectRow(row: Row) {\n    if (this.grid.getSetting('selectMode') !== 'multi') {\n      this.grid.selectRow(row);\n      this.emitUserSelectRow(row);\n      this.emitSelectRow(row);\n    }\n  }\n\n  onRowHover(row: Row) {\n    this.rowHover.emit(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.grid.multipleSelectRow(row);\n    this.emitUserSelectRow(row);\n    this.emitSelectRow(row);\n  }\n\n  onSelectAllRows($event: any) {\n    this.isAllSelected = !this.isAllSelected;\n    this.grid.selectAllRows(this.isAllSelected);\n\n    this.emitUserSelectRow(null);\n    this.emitSelectRow(null);\n  }\n\n  onSelectRow(row: Row) {\n    this.grid.selectRow(row);\n    this.emitSelectRow(row);\n  }\n\n  onMultipleSelectRow(row: Row) {\n    this.emitSelectRow(row);\n  }\n\n  initGrid() {\n    this.source = this.prepareSource();\n    this.grid = new Grid(this.source, this.prepareSettings());\n\n    this.subscribeToOnSelectRow();\n    this.subscribeToOnDeselectRow();\n  }\n\n  prepareSource(): DataSource {\n    if (this.source instanceof DataSource) {\n      return this.source;\n    } else if (this.source instanceof Array) {\n      return new LocalDataSource(this.source);\n    }\n\n    return new LocalDataSource();\n  }\n\n  prepareSettings(): Object {\n    return deepExtend({}, this.defaultSettings, this.settings);\n  }\n\n  changePage($event: any) {\n    this.resetAllSelector();\n  }\n\n  sort($event: any) {\n    this.resetAllSelector();\n  }\n\n  filter($event: any) {\n    this.resetAllSelector();\n  }\n\n  private resetAllSelector() {\n    this.isAllSelected = false;\n  }\n\n  private emitUserSelectRow(row: Row) {\n    const selectedRows = this.grid.getSelectedRows();\n\n    this.userRowSelect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n      selected: selectedRows && selectedRows.length ? selectedRows.map((r: Row) => r.getData()) : [],\n    });\n  }\n\n  private emitSelectRow(row: Row) {\n    const data = {\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n    };\n    this.rowSelect.emit(data);\n    if (!row?.isSelected) {\n      this.rowDeselect.emit(data);\n    }\n  }\n\n  private emitDeselectRow(row: Row): void {\n    this.rowDeselect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n    });\n  }\n\n  private isIndexOutOfRange(index: number): boolean {\n    const dataAmount: number = this.source?.count();\n    return index < 0 || (typeof dataAmount === 'number' && index >= dataAmount);\n  }\n\n  private subscribeToOnSelectRow(): void {\n    if (this.onSelectRowSubscription) {\n      this.onSelectRowSubscription.unsubscribe();\n    }\n    this.onSelectRowSubscription = this.grid.onSelectRow()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((row) => {\n        this.emitSelectRow(row);\n      });\n  }\n\n  private subscribeToOnDeselectRow(): void {\n    if (this.onDeselectRowSubscription) {\n      this.onDeselectRowSubscription.unsubscribe();\n    }\n    this.onDeselectRowSubscription = this.grid.onDeselectRow()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((row) => {\n        this.emitDeselectRow(row);\n      });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CellModule } from './components/cell/cell.module';\nimport { FilterModule } from './components/filter/filter.module';\nimport { PagerModule } from './components/pager/pager.module';\nimport { TBodyModule } from './components/tbody/tbody.module';\nimport { THeadModule } from './components/thead/thead.module';\n\nimport { Ng2SmartTableComponent } from './ng2-smart-table.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CellModule,\n    FilterModule,\n    PagerModule,\n    TBodyModule,\n    THeadModule,\n  ],\n  declarations: [\n    Ng2SmartTableComponent,\n  ],\n  exports: [\n    Ng2SmartTableComponent,\n  ],\n})\nexport class Ng2SmartTableModule {\n}\n","export class ServerSourceConf {\n\n  protected static readonly SORT_FIELD_KEY = '_sort';\n  protected static readonly SORT_DIR_KEY = '_order';\n  protected static readonly PAGER_PAGE_KEY = '_page';\n  protected static readonly PAGER_LIMIT_KEY = '_limit';\n  protected static readonly FILTER_FIELD_KEY = '#field#_like';\n  protected static readonly TOTAL_KEY = 'x-total-count';\n  protected static readonly DATA_KEY = '';\n\n  endPoint: string;\n\n  sortFieldKey: string;\n  sortDirKey: string;\n  pagerPageKey: string;\n  pagerLimitKey: string;\n  filterFieldKey: string;\n  totalKey: string;\n  dataKey: string;\n\n  constructor(\n    { endPoint = '', sortFieldKey = '', sortDirKey = '',\n      pagerPageKey = '', pagerLimitKey = '', filterFieldKey = '', totalKey = '', dataKey = '' } = {}) {\n\n    this.endPoint = endPoint ? endPoint : '';\n\n    this.sortFieldKey = sortFieldKey ? sortFieldKey : ServerSourceConf.SORT_FIELD_KEY;\n    this.sortDirKey = sortDirKey ? sortDirKey : ServerSourceConf.SORT_DIR_KEY;\n    this.pagerPageKey = pagerPageKey ? pagerPageKey : ServerSourceConf.PAGER_PAGE_KEY;\n    this.pagerLimitKey = pagerLimitKey ? pagerLimitKey : ServerSourceConf.PAGER_LIMIT_KEY;\n    this.filterFieldKey = filterFieldKey ? filterFieldKey : ServerSourceConf.FILTER_FIELD_KEY;\n    this.totalKey = totalKey ? totalKey : ServerSourceConf.TOTAL_KEY;\n    this.dataKey = dataKey ? dataKey : ServerSourceConf.DATA_KEY;\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { LocalDataSource } from '../local/local.data-source';\nimport { ServerSourceConf } from './server-source.conf';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { map } from 'rxjs/operators';\n\nexport class ServerDataSource extends LocalDataSource {\n\n  protected conf: ServerSourceConf;\n\n  protected lastRequestCount: number = 0;\n\n  constructor(protected http: HttpClient, conf: ServerSourceConf | {} = {}) {\n    super();\n\n    this.conf = new ServerSourceConf(conf);\n\n    if (!this.conf.endPoint) {\n      throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n    }\n  }\n\n  count(): number {\n    return this.lastRequestCount;\n  }\n\n  getElements(): Promise<any> {\n    return this.requestElements()\n      .pipe(map(res => {\n        this.lastRequestCount = this.extractTotalFromResponse(res);\n        this.data = this.extractDataFromResponse(res);\n\n        return this.data;\n      })).toPromise();\n  }\n\n  /**\n   * Extracts array of data from server response\n   * @param res\n   * @returns {any}\n   */\n  protected extractDataFromResponse(res: any): Array<any> {\n    const rawData = res.body;\n    const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n\n    if (data instanceof Array) {\n      return data;\n    }\n\n    throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n  }\n\n  /**\n   * Extracts total rows count from the server response\n   * Looks for the count in the heders first, then in the response body\n   * @param res\n   * @returns {any}\n   */\n  protected extractTotalFromResponse(res: any): number {\n    if (res.headers.has(this.conf.totalKey)) {\n      return +res.headers.get(this.conf.totalKey);\n    } else {\n      const rawData = res.body;\n      return getDeepFromObject(rawData, this.conf.totalKey, 0);\n    }\n  }\n\n  protected requestElements(): Observable<any> {\n    let httpParams = this.createRequesParams();\n    return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' });\n  }\n\n  protected createRequesParams(): HttpParams {\n    let httpParams = new HttpParams();\n\n    httpParams = this.addSortRequestParams(httpParams);\n    httpParams = this.addFilterRequestParams(httpParams);\n    return this.addPagerRequestParams(httpParams);\n  }\n\n  protected addSortRequestParams(httpParams: HttpParams): HttpParams {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);\n        httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addFilterRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.filterConf.filters) {\n      this.filterConf.filters.forEach((fieldConf: any) => {\n        if (fieldConf['search']) {\n          httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n        }\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addPagerRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n      httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n    }\n\n    return httpParams;\n  }\n}\n"]}